Implement type checking (error handling)
Group Nodes
Serialize Recipes
Recursive Nodes (receive 2 inputs, one for the data and one for the number of loops (recursive calls) to execute)
GUI for creating recipes
Implement Several nodes
Generate permutations of test scenarios

// TODO eventually limit queue size
// TODO if queue is full take oldest message and publish most recent ?
Filewriter -> write to a file :D
create handlers? on gui?




n√£o √© 100% num ou no outro, mas neste momento precisamos de rotas REST para criar/remover n√≥s
editar subscri√ß√µes
(edges)
o front-end tbem precisa de saber quais os tipos de n√≥s dispon√≠veis de cada tipo
no frontend √© preciso desenhar isto e ter callbacks para chamar as rotas

duvidas:
1) Web sockets para que entao? para retornar os resultados dos publishers/handlers?
2) A posi√ßao e assim dos nodes √© relevante?
3) criar n√≥s, √© suposto passar o que? uma string a dizer o tipo? üôÇ 
4) Editar subcri√ß√µes √© necessario passar os id's dos gajos?
5) Entao no front end temos de mostar os tipos de n√≥s existentes, strings? e Ter ao lado os id's de cad n√≥?
1) ya, para comunica√ß√£o do backend para o frontend, n√£o sei outra maneira
2) a posi√ß√£o √© irrelevante, s√≥ conta as liga√ß√µes
3) o front-end sabe que tipos de n√≥s h√°, e pode haver uma rota create/{tipo}
(parece trolha mas isto n√£o √© o foco de asso, acho que vale)
na cria√ß√£o devolve o id
depois para criar subscri√ß√µes o front-end j√° tem os ids necess√°rios
e ya, no frontend tens que mostrar os tipos de n√≥s existentes
temos que associar um tipo a uma string desse tipo no backend e mandar tudo para o front-end no in√≠cio
ya um enum manhoso
üëç1
agora duvidas de comunica√ßao. Vale a pena ter REST se tivermos apenas web sockets?
ou temos Rest para client -> server
e web sockets para server -> client?
eu diria a segunda
s√≥ porque √© mais f√°cil
se for tudo por sockets temos que inventar um protocolo
certo
vale a pena ter uma class graph?
ou um Document?
sim
at√© porque vamos ter que serializar


rotas para adicionar/apagar n√≥s
rotas para adicionar edges (subscri√ß√µes)
o Graph tem um Broker e um array de n√≥s (?)
e cenas tipo mapeamento de strings para classes de n√≥s
ou fazes uma AbstractFactory que recebe uma string e cria um n√≥
acho que tamb√©m tens que ter maneira de saber se uma subscri√ß√£o √© valida
tipo, se tentares subscrever uma Sink, n√£o devia dar, mas tem na mesma um I'd no Broker
um id*
se calhar √© preciso manter 3 arrays de n√≥s, 1 para cada tipo
e pronto, √† medida que for fazendo vou me lembrando de mais rotas



frontend vai ser botoes para criar n√≥s de cada tipo
criar arestas
e manter toda a info no frontend necess√°ria para isso
tamb√©m bot√µes para guardar/serializar e fazer load
üëç1
e para correr
e callbacks para isso tudo
e hopefully n√£o fica MT feio porque eu n√£o sei css bonito

https://github.com/uber/react-digraph


https://stackoverflow.com/questions/3732109/simple-http-server-in-java-using-only-java-se-api
https://www.logicbig.com/tutorials/core-java-tutorial/http-server/http-server-basic.html
https://www.codeproject.com/Tips/1040097/Create-a-Simple-Web-Server-in-Java-HTTP-Server
https://docs.oracle.com/javase/10/docs/api/com/sun/net/httpserver/HttpServer.html


https://www.stubbornjava.com/posts/lightweight-embedded-java-rest-server-without-a-framework
^

